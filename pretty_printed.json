Program(
    loc_={'start': {'line': 1, 'index': 0}, 'end': {'line': 11, 'index': 0}},
    range_=[0, 188],
    body_=[
        VariableDeclaration(
            loc_={},
            range_=[],
            id_=test2
            init_=UnaryExpression(
                loc_={},
                range_=[],
                operator_=TokenTypes.MINUS
                argument_=Literal(
                    loc_={},
                    range_=[],
                    value_=20,
                    raw_=20
                ),
            ),
        ),
        VariableDeclaration(
            loc_={},
            range_=[],
            id_=test
            init_=BinaryExpression(
                loc_={},
                range_=[],
                operator_=TokenTypes.MINUS
                left_=BinaryExpression(
                    loc_={},
                    range_=[],
                    operator_=TokenTypes.PLUS
                    left_=Literal(
                        loc_={},
                        range_=[],
                        value_=44,
                        raw_=44
                    ),
                    right_=Literal(
                        loc_={},
                        range_=[],
                        value_=20,
                        raw_=20
                    ),
                ),
                right_=BinaryExpression(
                    loc_={},
                    range_=[],
                    operator_=TokenTypes.MULTIPLY
                    left_=BinaryExpression(
                        loc_={},
                        range_=[],
                        operator_=TokenTypes.MINUS
                        left_=Identifier(
                            loc_={'start': {'line': 2, 'index': 14}, 'end': {'line': 2, 'index': 19}},
                            range_=[27, 32],
                            name_=test2
                        ),
                        right_=Literal(
                            loc_={},
                            range_=[],
                            value_=20,
                            raw_=20
                        ),
                    ),
                    right_=BinaryExpression(
                        loc_={},
                        range_=[],
                        operator_=TokenTypes.MINUS
                        left_=Literal(
                            loc_={},
                            range_=[],
                            value_=14,
                            raw_=14
                        ),
                        right_=Literal(
                            loc_={},
                            range_=[],
                            value_=3,
                            raw_=3
                        ),
                    ),
                ),
            ),
        ),
        VariableDeclaration(
            loc_={},
            range_=[],
            id_=test2
            init_=UnaryExpression(
                loc_={},
                range_=[],
                operator_=TokenTypes.MINUS
                argument_=Literal(
                    loc_={},
                    range_=[],
                    value_=20,
                    raw_=20
                ),
            ),
        ),
        VariableDeclaration(
            loc_={},
            range_=[],
            id_=test
            init_=BinaryExpression(
                loc_={},
                range_=[],
                operator_=TokenTypes.MULTIPLY
                left_=BinaryExpression(
                    loc_={},
                    range_=[],
                    operator_=TokenTypes.MINUS
                    left_=UnaryExpression(
                        loc_={},
                        range_=[],
                        operator_=TokenTypes.PLUS
                        argument_=Literal(
                            loc_={},
                            range_=[],
                            value_=10,
                            raw_=10
                        ),
                    ),
                    right_=Literal(
                        loc_={},
                        range_=[],
                        value_=20,
                        raw_=20
                    ),
                ),
                right_=BinaryExpression(
                    loc_={},
                    range_=[],
                    operator_=TokenTypes.MINUS
                    left_=Literal(
                        loc_={},
                        range_=[],
                        value_=14,
                        raw_=14
                    ),
                    right_=Literal(
                        loc_={},
                        range_=[],
                        value_=3,
                        raw_=3
                    ),
                ),
            ),
        ),
        FunctionDeclaration(
            loc_={},
            range_=[],
            id_=fib,
            params_=[
                Identifier(
                    loc_={},
                    range_=[],
                    name_=var1
                ),
                Identifier(
                    loc_={},
                    range_=[],
                    name_=var2
                ),
            ],
            body_=BlockStatement(
                loc_={},
                range_=[],
                body_=[
                    IfStatement(
                        loc_={},
                        range_=[],
                        test_=BinaryExpression(
                            loc_={},
                            range_=[],
                            operator_=TokenTypes.SMALLER_THAN
                            left_=Identifier(
                                loc_={'start': {'line': 7, 'index': 6}, 'end': {'line': 7, 'index': 10}},
                                range_=[121, 125],
                                name_=var1
                            ),
                            right_=Literal(
                                loc_={},
                                range_=[],
                                value_=2,
                                raw_=2
                            ),
                        ),
                        consequent_=BlockStatement(
                            loc_={},
                            range_=[],
                            body_=[
                                ReturnStatement(
                                    loc_={},
                                    range_=[],
                                    argument_=Identifier(
                                        loc_={'start': {'line': 8, 'index': 10}, 'end': {'line': 8, 'index': 11}},
                                        range_=[145, 146],
                                        name_=n
                                    ),
                                ),
                            ],
                        ),
                        alternate_=[]
                    ),
                    ReturnStatement(
                        loc_={},
                        range_=[],
                        argument_=BinaryExpression(
                            loc_={},
                            range_=[],
                            operator_=TokenTypes.PLUS
                            left_=CallExpression(
                                loc_={},
                                range_=[],
                                arguments_=[
                                    BinaryExpression(
                                        loc_={},
                                        range_=[],
                                        operator_=TokenTypes.MINUS
                                        left_=Identifier(
                                            loc_={'start': {'line': 9, 'index': 13}, 'end': {'line': 9, 'index': 14}},
                                            range_=[163, 164],
                                            name_=n
                                        ),
                                        right_=Literal(
                                            loc_={},
                                            range_=[],
                                            value_=1,
                                            raw_=1
                                        ),
                                    ),
                                callee_=Identifier(
                                    loc_={},
                                    range_=[],
                                    name_=fib
                                ),
                            ),
                            right_=CallExpression(
                                loc_={},
                                range_=[],
                                arguments_=[
                                    BinaryExpression(
                                        loc_={},
                                        range_=[],
                                        operator_=TokenTypes.MINUS
                                        left_=Identifier(
                                            loc_={'start': {'line': 9, 'index': 27}, 'end': {'line': 9, 'index': 28}},
                                            range_=[177, 178],
                                            name_=n
                                        ),
                                        right_=Literal(
                                            loc_={},
                                            range_=[],
                                            value_=2,
                                            raw_=2
                                        ),
                                    ),
                                callee_=Identifier(
                                    loc_={},
                                    range_=[],
                                    name_=fib
                                ),
                            ),
                        ),
                    ),
                ],
            ),
        ),
    ],
),
